model {
  
  # *********************************************************
  # Priors and likelihood
  # *********************************************************

  #---------------------------------------------
  # Model for population dynamics in each region
  #---------------------------------------------
  trend ~ dnorm(0,0.25)

    # Work forwards from baseline year
    for (y in 1:nyear){

      logX[y] <- trend * (y-1)
      X[y] <- exp(logX[y])

    }
  
  
  #---------------------------------------------
  # Model for breeding origins of migrants arriving at each station
  #---------------------------------------------
  
  sigma_stationyear ~ dgamma(0.25,0.25)
  tau_stationyear <- pow(sigma_stationyear,-2)
  
  for (s in 1:nstation){

      rho_mu[s] ~ dunif(0,10)
      log_rho_mu[s] <- log(rho_mu[s])

      for (y in 1:nyear){

	      rho[s,y] ~ dlnorm(log_rho_mu[s] - 1/(2*tau_stationyear),tau_stationyear)
        M[s,y] <- X[y] * rho[s,y]

    }
  }
  
  for (s in 1:nstation){
    for (y in 1:nyear){
      
      # Total number of migrants in year [y] at station [s]
      T[s,y] <- M[s,y]
 
    } # y
  } # s 
  
  #---------------------------------------------
  # Within-season model for migration counts
  #---------------------------------------------

   for (s in 1:nstation){
    migration_phenology_mean[s] ~ dunif(1,360)
    migration_phenology_sd[s] ~ dunif(0,20)
    migration_phenology_tau[s] <- pow(migration_phenology_sd[s],-2)
   
  }

  # Site-level fixed effects (for LPBO that contains multiple sub-stations)
  for (k in 1:nsite){

    site_effect[k] ~ dnorm(0,0.25)
    
    # Daily overdispersion in counts at each site (e.g., due to daily weather)
    sigma_stationday[k] ~ dgamma(0.25,0.25)
    tau_stationday[k] <- pow(sigma_stationday[k],-2)

  }
  
  for (i in 1:nobs){
    
    mu[i] <- log(f[i]) + log(T[station[i],year[i]]) + log(net_hrs[i]) + site_effect[site[i]]*dummy_site[i]
    expected_count[i] <- exp(mu[i])

    # Likelihood for counts
    f[i] <-  exp(logdensity.norm(day[i], migration_phenology_mean[station[i]], migration_phenology_tau[station[i]]))
    
    # Add daily overdispersion
    log_lambda[i] ~ dnorm(mu[i] - 1/(2*tau_stationday[site[i]]), tau_stationday[site[i]]) 
    count[i] ~ dpois(exp(log_lambda[i]))
    
    # *********************************************************
    # Simulate counts for posterior predictive checking
    # *********************************************************

    sim_log_lambda[i] ~ dnorm(mu[i] - 1/(2*tau_stationday[site[i]]), tau_stationday[site[i]]) 
    sim_count[i] ~ dpois(exp(sim_log_lambda[i] ))
   
    # chi-square statistics
    X2_sim[i] <- pow(sim_count[i] - expected_count[i],2)/expected_count[i]
    X2_obs[i] <- pow(count[i] - expected_count[i],2)/expected_count[i]

  }
  
  # *********************************************************
  # Derived quantities
  # *********************************************************

  #---------------------------------------------
  # Percent change from first to last year
  #---------------------------------------------
  
  percent_change <- 100 * (X[nyear] - X[1]) / X[1]

  #---------------------------------------------
  # Annual percent change
  #---------------------------------------------
  
  for (y in 2:nyear){
      stratum_annual_growth[y-1] <- 100*(X[y]-X[y-1])/X[y-1]
  }
  
}